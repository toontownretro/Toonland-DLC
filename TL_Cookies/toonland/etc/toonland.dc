////////////////////////// THE TOON LAND DLC //////////////////////////
// Filename: toonland.dc
// Created by: Cody/Fd Green Cat Fd (August 1st, 2013)
////////
// Description:
//
// A schema of sorts for all Toon Land distributed objects.
////////

from direct.distributed import DistributedObject
from direct.distributed import DistributedNode
from toontown.estate import DistributedHouse

typedef uint8 bool;

struct BarrierData {
  uint16 context;
  string name;
  uint32 avIds[];
};

dclass DistributedObject {
  setBarrierData(BarrierData []) broadcast ram;
  setBarrierReady(uint16) airecv clsend;
  execCommand(string, uint32, uint32, uint32);
  broadcastMessage() broadcast;
};

dclass DistributedNode : DistributedObject {
  setParentStr(blob) broadcast ram ownsend airecv;
  setParent(uint32) broadcast ram ownsend airecv;
  setX(int16/10) broadcast ram ownsend airecv;
  setY(int16/10) broadcast ram ownsend airecv;
  setZ(int16/10) broadcast ram ownsend airecv;
  setH(int16%360/10) broadcast ram ownsend airecv;
  setP(int16%360/10) broadcast ram ownsend airecv;
  setR(int16%360/10) broadcast ram ownsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
};

dclass DistributedHouse : DistributedObject {
  string DcObjectType db;
  setHousePos(uint8) required broadcast;
  setHouseType(uint8) required broadcast db;
  setGardenPos(uint8) required broadcast db;
  setAvatarId(uint32) required broadcast db;
  setName(string) required broadcast db;
  setColor(uint8) required broadcast db;
  setAtticItems(blob) required db;
  setInteriorItems(blob) required db;
  setAtticWallpaper(blob) required db;
  setInteriorWallpaper(blob) required db;
  setAtticWindows(blob) required db;
  setInteriorWindows(blob) required db;
  setDeletedItems(blob) required db;
  setCannonEnabled(uint8) required;
  setHouseReady() broadcast ram;
};

dclass DistributedGeyserFountain : DistributedNode {
  playGeyserEffect() broadcast clsend;
};

dclass DistributedHiccupTrashCan : DistributedNode {
  requestHiccup() broadcast clsend;
};

dclass DistributedFFPicnicBasket : DistributedObject {
  setClockTime(uint32, uint32, uint8) broadcast clsend;
  setAvatarState(uint32, int8, int8) broadcast ram clsend;
};

dclass DistributedFFDoor : DistributedObject {
  avatarEnter(uint32) broadcast clsend;
  avatarExit(uint32) broadcast clsend;
  setState(string, int16) broadcast ram clsend;
};